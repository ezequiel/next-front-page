@import "next-sass-setup/main";

@import "colors";
@import "type";

@import "n-header-footer/main";
@import "next-welcome/main";
@import "n-notification/main";

@import "components/grid/main";
@import "components/story-card/main";
@import "components/carousel-card/main";
@import "components/header-tabs/main";

@import "icons";

@import "components/feed/main";
@import "components/feed/fastft/main";

@import "components/flexipod/main";

@import "flexipod-layouts";

html {
	@include oColorsFor(page);
	@include nTypeAlpha(3);
	background-color: oColorsGetPaletteColor('warm-bg');

	// Prevent navigation menus from creating
	// extra space on sides of the page
	overflow-x: hidden;
}

* {
	box-sizing: border-box;
	margin: 0;
}

a {
		text-decoration: none;
		color: inherit;
}

body {
	padding: 0;
	margin: 0;

	@include nhGridGenerate();
	@include nhHeaderTabs();

	.nh-header-tabs__tablist {
		display: none;
	}

	@include nhGridRespondTo($until: S) {
		// top tabs
		@include nhHeaderTabsActive();

		.nh-header-tabs__tablist {
			display: block;
		}

		// initial state
		.nh-header-tabs__panel {
			display: block;
		}

		.sidebar--fastft.nh-header-tabs__panel {
			display: none;
		}

		// main-content-container should always be shown
		.main-content-container {
			display: block;
		}

		// selected states

		#news-tab:target ~ .main-content-container .sidebar {
			display: none;
		}

		#fastft-tab:target ~ .main-content-container {
			.main-content {
				display: none;
			}

			.sidebar {
				display: block;
			}
		}

		#fastft-tab:target ~ .nh-header-tabs__panel {
			display: none;
		}

		#fastft-tab:target ~ .main-content-container {
			display: block;
		}
	}
}

// Top tabs

.fixed-width-container {
	@each $layout in $nh-container-widths {
		@include nhGridRespondTo(nth($layout, 1)) {
			width: nth($layout, 2);
		}
	}
	overflow: hidden;
	margin: 0 auto;
}

.fastft--header {
	@include nhFastFtTitle;
	@include nhGridMargins;

	background-color: oColorsGetPaletteColor(warm-base);
	padding: 5px 0.25em 0 0.2em;
	border-bottom: 1px solid oColorsGetPaletteColor(fastft-brand);

	@include nhGridRespondTo($from: S) { display: none };
}

.main-content {
	@include nhGridColumn($span: (default: 12, M: 9, S: 8));

	.flexipod--lead-today {
		// TODO think about sinking the breakpoints into nhFlexipod
		@include nhFlexipodStory(map-get($layout-lead-today, default));

		@include nhGridRespondTo(XS) {
			@include nhFlexipodStory(map-get($layout-lead-today, XS));
		}

		@include nhGridRespondTo(S) {
			@include nhFlexipodStory(map-get($layout-lead-today, S));
		}

		@include nhGridRespondTo(M) {
			@include nhFlexipodStory(map-get($layout-lead-today, M), 9);
		}
	}

	.flexipod--opinion {
		// TODO think about sinking the breakpoints into nhFlexipodStory
		@include nhFlexipodStory(map-get($layout-opinion, default));

		@include nhGridRespondTo(XS) {
			@include nhFlexipodStory(map-get($layout-opinion, XS));
		}

		@include nhGridRespondTo(S) {
			@include nhFlexipodStory(map-get($layout-opinion, S));
		}

		@include nhGridRespondTo(M) {
			@include nhFlexipodStory(map-get($layout-opinion, M), 12);
		}
	}

	.flexipod--column {
		// TODO think about sinking the breakpoints into nhFlexipodStory
		@include nhFlexipodStory(map-get($layout-column, default));

		@include nhGridRespondTo(XS) {
			@include nhFlexipodStory(map-get($layout-column, XS));
		}

		@include nhGridRespondTo(S) {
			@include nhFlexipodStory(map-get($layout-column, S));
		}

		@include nhGridRespondTo(M) {
			@include nhFlexipodStory(map-get($layout-column, M));
		}

	}

	// .flexipod--editors {
	// 	// TODO think about sinking the breakpoints into nhFlexipod
	// 	@include nhFlexipodCarousel(map-get($layout-editors, default));
	// }
}

.next-header {
	@include nhGridRespondTo($from: S) { margin-bottom: 20px; }
}

.sidebar {
	&.sidebar--fastft {
		display: none;

		@include nhGridRespondTo($from: S) {
			display: block;
		}
	}
}

#fastft {
	h1 {
		@include nhFastFtTitle;
	}
}
.feed {
	article {
		@include nhFeedItem;
	}
}

.bordered-spacer {
	@include dots;
	margin: 10px 0;
}

.bordered-row {
	overflow: hidden;
	clear: both;
	position: relative;
	background-color: oColorsGetPaletteColor('warm-carousel');
	padding: 10px 10px 20px;
	&::before, &::after {
		@include dots;
		position: absolute;
	}
	&::before { top: 0; }
	&::after { bottom: 0; }
}
