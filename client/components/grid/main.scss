@import "sass-mq/mq";
@import "variables";

// This mostly follows o-grid, except the columns and gutters
// are all flexible and derived from the total width of the grid
// which changes all the width calculations.
//
// prefixed nh- for "next homepage" for now.

// TODO support dynamically adding layouts

@mixin nhGridRespondTo($from: false, $until: false) {
	@include mq($from: $from, $until: $until, $breakpoints: $nh-grid-layouts) {
		@content;
	}
}

@mixin nhGridColumn($span: null, $total-cols: $nh-grid-columns) {
	display: block;
	width: 100%;
	box-sizing: border-box;
	float: left;
	min-height: 1px;

	@include nhGridMargins($total-cols);

	@if $span {
		@include nhGridColspan($span, $total-cols);
	}
}

@mixin nhGridMargins($total-cols: $nh-grid-columns) {
	$subgrid-ratio: $nh-grid-columns / $total-cols;

	margin: percentage($subgrid-ratio * $nh-grid-gutter / 2);
}

/// % width of an item in the grid
///
/// Result is always an integer - number of columns to span
/// this function is a helper to make fractional spans decoupled
/// from the number of columns
///
/// @param {Number}
/// @returns {Number} width of the element in percents
@function nhGridColspan($span, $total-cols: $nh-grid-columns) {
	@return nhGridSpan($span, $total-cols, -1);
}

@function nhGridSkip($span, $total-cols: $nh-grid-columns) {
	@return nhGridSpan($span, $total-cols, 0);
}

// private
@function nhGridSpan($span, $total-cols, $gutters: -1) {
	@if $span < 1 {
		// A fraction (1/2) or a number (0.5) is supplied:
		// converting it into a percentage
		@if round($span * $total-cols) != ($span * $total-cols) {
			@error "Colspan #{$span} doesn't result in an integer column number (= #{$span * $total-cols}).";
		}

		$span: $span * $total-cols;
	}

	// final width of the grid item
	$subgrid-ratio: $nh-grid-columns / $total-cols;
	@return percentage($subgrid-ratio * ($span * $nh-grid-column + ($span + $gutters) * $nh-grid-gutter))
}

/// Colspan mixin
///
/// @example scss
///   el { @include nhGridColspan(4); }
///   el { @include nhGridColspan(1/2); }
///   el { @include nhGridColspan((default: 12, M: 8, L: hide)); }
@mixin nhGridColspan($span, $total-cols) {
	@if type-of($span) == number {
		width: nhGridColspan($span, $total-cols);
	}

	@if type-of($span) == map {
		// iterate through the map
		@each $layout-name, $layout-span in $span {
			@if $layout-name == 'default' {
				// no media query
				width: nhGridColspan($layout-span, $total-cols);
			} @else {
				// media query specific
				@include nhGridRespondTo($layout-name) {
					width: nhGridColspan($layout-span, $total-cols);
				}
			}
		}
	}
}

@mixin nhGridRow($total-cols: $nh-grid-columns) {
	// negative margin to swallow the outer column's margins
	$subgrid-ratio: $nh-grid-columns / $total-cols;

	margin-left: percentage($subgrid-ratio * -$nh-grid-gutter / 2);
	margin-right: percentage($subgrid-ratio * -$nh-grid-gutter / 2);

	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin nhGridContainer() {
	box-sizing: border-box;
	margin-right: auto;
	margin-left: auto;
	padding-left: percentage($nh-grid-gutter / 2);
	padding-right: percentage($nh-grid-gutter / 2);

	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

// TODO pushes, pulls and skips

@mixin nhGridGenerate($total-cols: $nh-grid-columns) {
	.nh-grid-container {
		@include nhGridContainer();
	}

	.nh-grid-row {
		@include nhGridRow($total-cols);
	}

	[data-nh-grid-colspan] {
		@include nhGridColumn($total-cols: $total-cols);
	}

	@for $span from 1 through $total-cols {
		[data-nh-grid-colspan~="#{$span}"] {
			@include nhGridColspan($span, $total-cols);
		}
	}

	@each $layout-name in $_nh-grid-layout-names {
		@include nhGridRespondTo($layout-name) {
			@for $span from 1 through $total-cols {
				[data-nh-grid-colspan~="#{$layout-name}#{$span}"] {
					@include nhGridColspan($span, $total-cols);
				}
			}
		}
	}
}
